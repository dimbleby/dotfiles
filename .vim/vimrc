" Prelude {{{1
scriptencoding utf-8

" Python environment {{{1
"
" Use python3, not python2 {{{2
set pyxversion=3

" Use the neovim virtualenv {{{2
if has('nvim')
    let g:python3_host_prog = $HOME.'/.virtualenvs/neovim/bin/python3'
    let g:loaded_python_provider = 0
endif

" Preferences {{{1
" Defaults {{{2
set autoread
set background=dark
set complete-=i
set dictionary=/usr/share/dict/words
set display+=lastline
set diffopt+=vertical
if has('nvim') || has('patch-8.1.0360')
    set diffopt+=algorithm:histogram,indent-heuristic
endif
set foldlevelstart=99
set history=10000
if exists('&inccommand')
    set inccommand=nosplit
endif
set incsearch
if exists('&jumpoptions')
    set jumpoptions=stack
endif
set laststatus=2
set lazyredraw
set list listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set nomodeline
set nrformats-=octal
set scrolloff=1 sidescrolloff=5 sidescroll=1
set sessionoptions-=options
set shortmess+=c
set showcmd noshowmode
set splitbelow splitright
set tabpagemax=50
if !has('nvim')
    set ttyfast
endif
set wildmenu

" Indenting and formatting {{{2
set expandtab smarttab
set tabstop=4 shiftwidth=0 softtabstop=-1
set shiftround
set formatlistpat=^\\s*[-*+]\\s\\+
set formatoptions-=t formatoptions+=croqnlj

" Filetype-specific variations {{{2
let c_space_errors = 1
let c_syntax_for_h = 1
let g:pyindent_open_paren = '&sw'

" Enable Cfilter {{{2
if has('nvim') || has('patch-8.1.311')
    packadd cfilter
endif

" Recognise various archives {{{2
augroup ArchiveFiles
    autocmd!
    autocmd BufReadCmd *.whl call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.ova call tar#Browse(expand("<amatch>"))
augroup END

" Open terminal in insert mode {{{2
if has('nvim')
    augroup OpenTerminal
        autocmd!
        autocmd TermOpen,WinEnter term://* startinsert
    augroup END
endif

" Use ripgrep {{{2
if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

" Backups {{{2
" Consider a crontab entry like this:
" 0 0 * * *   find ~/.local/share/nvim/backup -not -newerat "1 month ago" -type f -delete
set backup
set backupdir=~/.local/share/nvim/backup

" Restore cursor position {{{2
augroup RestoreCursor
    autocmd!
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif
augroup END

" Plugins {{{1
" Load plug.vim automatically {{{2
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " vint: next-line -ProhibitAutocmdWithNoGroup
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Install plugins {{{2
call plug#begin('~/.vim/plugged')

" Color scheme {{{3
Plug 'lifepillar/vim-gruvbox8'

" Language-specific highlighting and suchlike {{{3
Plug 'pearofducks/ansible-vim'
Plug 'ElmCast/elm-vim'
Plug 'dimbleby/vim-minizinc'
Plug 'dimbleby/vim-p4-syntax'
Plug 'rust-lang/rust.vim'
Plug 'derekwyatt/vim-scala'
Plug 'hashivim/vim-terraform'
Plug 'cespare/vim-toml'
Plug 'nathanalderson/yang.vim'

" Linting {{{3
Plug 'dense-analysis/ale'

" Language Servers {{{3
if has('nvim')
    Plug 'neovim/nvim-lspconfig'
endif

" Treesitter {{{3
if has('nvim')
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'nvim-treesitter/nvim-treesitter-textobjects'
endif

" Completions and snippets {{{3
if has('nvim')
    Plug 'hrsh7th/nvim-compe'
    Plug 'hrsh7th/vim-vsnip'
endif

" Block formatting, IPS trace navigation {{{3
Plug 'https://git.datcon.co.uk/dch/BlockFormat.git'
Plug 'https://git.datcon.co.uk/dch/vimips.git'

" Status line {{{3
if has('nvim')
    Plug 'hoob3rt/lualine.nvim'
endif

" Fuzzy finder {{{3
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Markdown preview {{{3
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }

" Miscellany {{{3
Plug 'justinmk/vim-dirvish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
call plug#end()

" Colours {{{2
if !has('nvim')
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum
endif
if exists('&termguicolors')
    set termguicolors
endif
augroup ColorOverrides
    autocmd!
    autocmd ColorScheme * highlight Normal guibg=NONE ctermbg=NONE
augroup end
let g:gruvbox_italicize_strings = 0
colorscheme gruvbox8

" Language servers {{{2
if has('nvim')
    lua require('lsp')
    augroup LspSettings
        autocmd!
        autocmd User LspDiagnosticsChanged lua vim.lsp.diagnostic.set_loclist({open=false})
    augroup END
endif

" Treesitter {{{2
if has('nvim')
    lua require('treesitter-config')
endif

" Ale {{{2
let g:ale_fix_on_save = 1
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'] }
let g:ale_linters = {}
let g:ale_linters.c = []
let g:ale_linters.cpp = []
let g:ale_linters.go = []
let g:ale_linters.python = ['flake8', 'mypy']
let g:ale_linters.rust = []
let g:ale_linters.terraform = []
let g:ale_linters.yang = []

" Lualine {{{2
if has('nvim')
    lua require('lualine-config')
endif

" Markdown preview {{{2
let g:markdown_composer_autostart = 0

" Elm {{{2
let g:elm_format_autosave = 0

" Completion and snippets {{{2
set completeopt=menuone,noselect
if has('nvim')
    lua require('completion')
    let g:vsnip_snippet_dir = $HOME.'/.vim/vsnip'
endif

" Treesitter folding by default {{{2
if has('nvim')
    set foldmethod=expr
    set foldexpr=nvim_treesitter#foldexpr()
endif

" Mappings {{{1
" Leader {{{2
let mapleader = "\<Space>"

" Logical Y {{{2
noremap Y y$

" Avoid Ex mode {{{2
nnoremap Q <nop>

" Improved <C-l> {{{2
nnoremap <C-l> :nohlsearch<Bar>diffupdate<CR><C-l>

" Insert undo point before deleting a line or word {{{2
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Terminal mode {{{2
if has('nvim') || has('terminal')
    tnoremap <Esc> <C-\><C-n>
endif
if has('nvim')
    tnoremap <C-w> <C-\><C-n><C-w>
endif

" Sudo write {{{2
" NB broken in neovim - https://github.com/neovim/neovim/issues/1716
if !has('nvim')
    cnoremap w!! w !sudo tee % > /dev/null
endif

" Searching {{{2
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>f :Files<CR>
nnoremap <expr> <Leader>g exists(':Ggrep') ? ':Ggrep!<Space>' : ':Rg<CR>'
nnoremap <Leader>h :History<CR>
nnoremap <Leader>r :Rg<CR>

" Formatting the whole file {{{2
nnoremap <silent> <Leader>q :call format#FormatFile()<CR>

" Open the URL under the cursor in a browser {{{2
if has('nvim')
    nnoremap gx <Cmd>call jobstart(["xdg-open", expand("<cfile>")])<CR>
else
    nnoremap gx :call job_start('xdg-open '.expand('<cfile>'))<CR>
endif
